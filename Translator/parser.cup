/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            COM, PLUS, LPAREN, RPAREN, LBRA, RBRA, IFSYM, ELSESYM, PREFIX, SUFFIX;
terminal String     STRINGL, IDENT;        // our scanner provides numbers as strings

/*  Non terminals */
non terminal            expr_list;
non terminal Integer    expr;      // used to store evaluated subexpressions

/**
 *  Precedence Declarations
 */
precedence left PLUS;

/**
 *  The Grammar Rules
 */
expr_list ::= expr_list expr:e          {: System.out.println(e);         :}
            | expr:e                    {: System.out.println(e);         :}
;
expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;                :}
             | LPAREN expr:e RPAREN	        {: RESULT = e;                    :}
             | STRINGL:s     	            {: RESULT = Integer.parseInt(s);  :}
             ;
